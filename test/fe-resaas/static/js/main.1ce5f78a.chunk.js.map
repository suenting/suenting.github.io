{"version":3,"sources":["components/Post.js","containers/App.js","serviceWorker.js","index.js"],"names":["Post","react_default","a","createElement","className","alt","src","this","props","message","user","name","email","address","city","title","body","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isLoaded","isError","filterText","posts","undefined","_this2","userPromise","fetch","then","result","json","postsPromise","Promise","all","users","merged","forEach","post","userId","it","length","id","findUser","push","setState","catch","error","e","target","value","_this3","filteredPosts","filter","toLowerCase","includes","type","onChange","onChangeHandler","bind","aria-describedby","placeholder","map","x","index","src_components_Post","key","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1ce5f78a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Post.css';\r\n\r\nclass Post extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container post\">\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <img className=\"rounded-circle\" alt=\"userimg\" src=\"https://via.placeholder.com/75\" />\r\n          </div>\r\n          <div className=\"col-10 user\">\r\n            {this.props.message.user.name} <br />\r\n            {this.props.message.user.email} | {this.props.message.user.address.city}<br />          \r\n          </div>\r\n        </div>\r\n        <strong>{this.props.message.title}</strong><br />\r\n        <p>{this.props.message.body}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Post;\r\n","import React, { Component } from 'react';\nimport './bootstrap.css';\nimport './App.css';\nimport Post from '../components/Post';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      isLoaded: false,\n      isError: false,\n      filterText: '',\n      posts: undefined\n    };\n  }\n\n  componentDidMount() {\n    let userPromise = fetch('https://jsonplaceholder.typicode.com/users')\n      .then(result => result.json());\n    let postsPromise = fetch('https://jsonplaceholder.typicode.com/posts')\n      .then(result => result.json());\n    Promise.all([userPromise, postsPromise]).then(result => {\n      let users = result[0];\n      let posts = result[1];\n      let merged = [];\n      let findUser = function (userId) {\n        for (let it = 0; it < users.length; ++it) {\n          if (users[it].id === userId) {\n            return users[it];\n          }\n        }\n        return undefined;\n      }\n      posts.forEach((post) => {\n        post.user = findUser(post.userId);\n        merged.push(post);\n      });\n\n      this.setState({\n        isLoaded: true,\n        posts: merged\n      });\n    })\n      .catch(error => {\n        this.setState({\n          isError: true,\n        });\n      });\n  }\n\n  onChangeHandler(e) {\n    this.setState({\n      filterText: e.target.value,\n    });\n  }\n\n  render() {\n    if (!this.state.isLoaded) {\n      return (<div className=\"container padTop\">Loading...</div>);\n    }\n    if (this.state.isError) {\n      return (<div id=\"error\" className=\"container padTop\">Failed to load messages, please ensure you're connected to the internet.</div>);\n    }\n\n    let listPosts = function(x,index){\n      return <Post key={index} message={x}></Post>;\n    };\n\n    let filteredPosts = [];\n    this.state.posts.forEach((post)=>{\n      // ignore case on filter\n      let filter = this.state.filterText.toLowerCase();\n      if(\"\" === filter){\n        filteredPosts.push(post);\n        return;\n      }\n      // assumption filter on all displayed fields\n      if(\n        post.user.name.toLowerCase().includes(filter) ||\n        post.user.email.toLowerCase().includes(filter) ||\n        post.user.address.city.toLowerCase().includes(filter) ||\n        post.title.toLowerCase().includes(filter) ||\n        post.body.toLowerCase().includes(filter))\n        {\n          filteredPosts.push(post);\n        }\n    });\n\n    return (\n      <div className=\"container padTop\">\n        <input type=\"text\" className=\"form-control\" onChange={this.onChangeHandler.bind(this)} aria-describedby=\"filterPosts\" placeholder=\"Filter posts by keyword\"></input>\n        <br />\n        {filteredPosts.map(listPosts)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}